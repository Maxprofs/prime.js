/*
 * Copyright (c) 2014-2015, Inversoft Inc., All Rights Reserved
 */
savantVersion = "0.4.4"

project(group: "org.inversoft.prime", name: "prime.js", version: "0.34.7", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  publications {
    main {
      publication(name: "prime", type: "js", file: "build/js/prime.js", source: "build/js/prime.js")
      publication(name: "prime-min", type: "js", file: "build/js/prime-min.js", source: "build/js/prime.js")
      publication(name: "prime", type: "css", file: "build/css/prime.css", source: "build/css/prime.css")
      /* Publish each stylesheet */
      new File("src/main/css").eachFile { file ->
        publication(name: file.name, type: "css", file: file.absolutePath, source: file.absolutePath)
      }
      publication(name: "prime-all", type: "zip", file: "build/prime-all.zip", source: "build/prime-all.zip")
    }
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:${savantVersion}")
file = loadPlugin(id: "org.savantbuild.plugin:file:${savantVersion}")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:${savantVersion}")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

target(name: "clean", description: "Does nothing. Exists for scripting") {
  file.prune(dir: "build")
}

target(name: "int", description: "Releases a local integration build of the project") {
  file.prune(dir: "build/js")
  file.append(to: "build/js/prime.js") {
    fileSet(dir: "src/main/js", includePatterns: [~/.+\.js/], excludePatterns: [~/.+\/.+/])
  }

  def process = "uglifyjs build/js/prime.js".execute()
  new File("build/js/prime-min.js") << process.text

  /* Build a monolithic stylesheet */
  file.prune(dir: "build/css")
  file.append(to: "build/css/prime.css") {
    fileSet(dir: "src/main/css", includePatterns: [~/.+\.css/], excludePatterns: [~/.+\/.+/])
  }

  /* Also copy each stylesheet individually */
  file.copy(to: "build/css") {
    fileSet(dir: "src/main/css")
  }

  /* Delete previous zip and build zip containing all artifacts */
  file.delete {
    fileSet(dir: "build", includePatterns: [~/prime-all.+\.zip/])
  }

  file.zip(file: "build/prime-all.zip") {
    fileSet(dir: "src/main", includePatterns: [~/css/, ~/images/])
    fileSet(dir: "build", includePatterns: [/js\/.+\.js/])
  }
  dependency.integrate()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["int"]) {
  release.release()
}
