/*
 * Copyright (c) 2014-2018, Inversoft Inc., All Rights Reserved
 */
savantVersion = "1.0.0"

project(group: "org.inversoft.prime", name: "prime.js", version: "1.2.0", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  publications {
    main {
      publication(name: "prime", type: "js", file: "build/prime.js", source: "build/prime.js")
      publication(name: "prime", type: "css", file: "build/prime.css", source: "build/prime.css")
      publication(name: "prime-min", type: "js", file: "build/prime-min.js", source: "build/prime-min.js")
      publication(name: "prime-min", type: "js.map", file: "build/prime-min.js.map", source: "build/prime-min.js.map")
      publication(name: "prime-min", type: "css", file: "build/prime-min.css", source: "build/prime-min.css")
      publication(name: "prime-min", type: "css.map", file: "build/prime-min.css.map", source: "build/prime-min.css.map")
      publication(name: "prime-es6", type: "js", file: "build/prime-es6.js", source: "build/prime-es6.js")
      publication(name: "prime-es6-min", type: "js", file: "build/prime-es6-min.js", source: "build/prime-es6-min.js")
      publication(name: "prime-es6-min", type: "js.map", file: "build/prime-es6-min.js.map", source: "build/prime-es6-min.js.map")
      publication(name: "prime-all", type: "zip", file: "build/prime-all.zip", source: "build/prime-all.zip")
    }
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:${savantVersion}")
file = loadPlugin(id: "org.savantbuild.plugin:file:${savantVersion}")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:${savantVersion}")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

target(name: "clean", description: "Does nothing. Exists for scripting") {
  file.prune(dir: "build")
}

target(name: "setup", description: "installs gulp") {
  def proc = "npm install -g gulp".execute()
  proc.consumeProcessOutput(System.out, System.err)
  proc.waitFor()
  proc = "npm install".execute()
  proc.consumeProcessOutput(System.out, System.err)
  proc.waitFor()
}

target(name: "int", description: "Releases a local integration build of the project", "dependsOn": ["test"]) {
  if (switches.has("skipTests")) {
    def success = "which gulp".execute().exitValue()
    if (success == 1) {
      println "Error. Can't build without setup. Run > sb setup"
      exit
    }

    def gulp = "gulp".execute()
    gulp.consumeProcessOutput(System.out, System.err)
    gulp.waitFor()
  }

  file.zip(file: "build/prime-all.zip") {
    fileSet(dir: "build", excludePatterns: [~/.+\.zip/])
  }

  dependency.integrate()
}

target(name: "test", description: "Runs tests for the project") {
  if (switches.has("skipTests")) {
    return
  }

  def success = "which gulp".execute().exitValue()
  if (success == 1) {
    println "Error. Can't test without setup. Run > sb setup"
    exit
  }

  def karma
  if (switches.has("debug")) {
    karma = "gulp test".execute()
    karma.consumeProcessOutput(System.out, System.err)
  } else {
    karma = "gulp fastTest".execute()
  }

  karma.waitFor()
  assert karma.exitValue() != 1
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "int"]) {
  release.release()
}
