{"name":"Prime JS","tagline":"Prime JavaScript Framework","body":"# Prime JavaScript\r\n\r\nPrime JavaScript is a different kind of framework. Prime is written in 100% standard, explicit, and namespaced OO JavaScript. \r\n\r\n* No fancy Class utilities. \r\n* No fancy dynamic code injection.\r\n* **Just plain JavaScript.**\r\n\r\nIf you are looking for something like this:\r\n\r\n```\r\n$('.box .header').slideUp();\r\n```\r\n\r\nPrime is NOT for you. Prime is not terse and not flat. Prime is not about injecting code into a large hash and hoping it works.\r\n\r\nOn the other hand, if you love any of these things:\r\n\r\n* Objects that you can actually extend\r\n* Full JSDoc\r\n* Explicit methods you can debug\r\n* 100% API consistency\r\n* Builder pattern interfaces\r\n* Minimal use of eventing\r\n\r\nYou will love Prime!\r\n\r\n## Getting Started\r\n\r\nTo get started with Prime, you best bet will be to clone the git repository. This contains all of the JavaScript files in the src/main/js directory. If you have Gradle installed and want to generate a single JS file, run:\r\n\r\n```\r\n$ gradle jar\r\n```\r\n\r\nYeah, we know this doesn't actually JAR anything, but Gradle relies on the java plugin and we just went with it.\r\n\r\nOnce you have either the Prime JavaScript file(s) copied into your project, insert the standard script tag in your header and you are SET!\r\n\r\n```\r\n<script type=\"text/javascript\" src=\"/js/prime-0.10.js\"></script>\r\n```\r\n\r\n## Selecting\r\n\r\nSelecting in Prime uses a static function in the Prime.Dom namespace. Under the hoods this uses Sizzle, so if you are used to JQuery or other frameworks, it works the same. Here's an example:\r\n\r\n```\r\nvar element = Prime.Dom.queryFirst('.box .header');\r\n```\r\n\r\nThe return value of this function is a new instance of the _Prime.Dom.Element_ class. You can also select multiple elements like this:\r\n\r\n```\r\nvar elementList = Prime.Dom.query('p');\r\n```\r\n\r\nThe return value of this function is a new instance of the _Prime.Dom.ElementList_ class. \r\n\r\nThere are a few other selector methods in the _Prime.Dom_ namespace:\r\n\r\n* queryUp - queries upwards for elements\r\n* queryLast - queries the last matching element\r\n* queryByID - takes an ID and returns a Prime.Dom.Element\r\n\r\nLike all of Prime, these functions are well documented and you should use our JSDoc to learn how to use them. If you ever see a method that isn't well documented, file an issue and we'll fix it.\r\n\r\n## ElementLists\r\n\r\nThe simplest usage of a _Prime.Dom.ElementList_ is to iterate over all of the elements. The _each_ method makes this simple:\r\n\r\n```\r\nelementList.each(function(element) {\r\n  // Do something interesting with the element\r\n});\r\n```\r\n\r\n## Element\r\n\r\nElement objects are the basis of Prime. You use them to manipulate and traverse the DOM. Refer to the JSDoc for the Element class to learn about the functions we have already implemented. If you need a new one, suggest it on the mailing list or in the issue tracker.\r\n\r\n## Document Ready\r\n\r\nAnother common task is to register an event listener that is called when the document is ready. Here is how you do that with Prime:\r\n\r\n```\r\nfunction ready() {\r\n  // Do something\r\n}\r\n\r\nPrime.Dom.onDocumentReady(ready);\r\n```\r\n\r\nOr the inline method like this:\r\n\r\n```\r\nPrime.Dom.onDocumentReady(function() {\r\n  // Do something\r\n});\r\n```\r\n\r\n## AJAX\r\n\r\nPrime has a class named _Prime.Ajax.Request_ that supports all your AJAXy needs. You can even subclass the _Request_ class to add your own event handlers and more. Here's a quick example of using the _Request_ to make an AJAX request:\r\n\r\n```\r\nfunction success() {\r\n  // Do something\r\n}\r\n\r\nnew Prime.Ajax.Request('/some/uri', 'POST').\r\n    withSuccessHandler(success).\r\n    go();\r\n```\r\n\r\nRefer to the JSDoc to explore Prime's AJAX handling.\r\n\r\n## Context and this\r\n\r\nWe got tired of _this_ being different things with every framework (or even in two different places in the same framework). We decided it was time to make _this_ consistent (or at least as much as we could). Since Prime is based on Objects/Classes, you can make Prime ensure that _this_ refers to the current object.\r\n\r\nHere is an example of using _Prime.Dom.Element_ inside a class to handle click events:\r\n\r\n```\r\nvar MyClass = function() {\r\n  this.element = Prime.Dom.queryFirst('.some-class').\r\n      addEventListener('click', this.handleClickEvents, this);\r\n};\r\n\r\nMyClass.prototype = {\r\n  handleClickEvents: function(event) {\r\n    // The this variable will refer to this object\r\n  }\r\n}\r\n```\r\n\r\nNotice that when we added the event listener to the element, we passed in the event name, the handler function and then _this_. What this tells Prime to do is ensure that when the event handler function is called that the _this_ variable is correct.\r\n\r\nEverywhere we could make this work in Prime, we did. Nearly all event methods take this third parameter.\r\n\r\n## Learn More\r\n\r\nDive into the JSDoc for Prime and see what you can find. Or if you need additional assistance, send a message to the Prime User mailing list here:\r\n\r\n[https://groups.google.com/forum/?fromgroups#!forum/prime-framework-users](https://groups.google.com/forum/?fromgroups#!forum/prime-framework-users)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}