{"name":"Prime JS","tagline":"Prime JavaScript Framework","body":"# Prime JavaScript\r\n\r\nPrime JavaScript is a different kind of JavaScript framework. Prime is written in 100% standard, explicit, and namespaced OO JavaScript. \r\n\r\n* No fancy Class utilities. \r\n* No fancy dynamic code injection.\r\n* **Just plain JavaScript.**\r\n\r\nIf you are looking for something like this:\r\n\r\n```\r\n$('.box .header').slideUp();\r\n```\r\n\r\nPrime is NOT for you. Prime is not terse and not flat. Prime is not about injecting code into a large hash and hoping it works.\r\n\r\nOn the other hand, if you love any of these things:\r\n\r\n* Objects and classes\r\n* Objects and classes that you can actually extend\r\n* Using the **new** operator\r\n* JSDoc\r\n* Explicit functions you can debug (no dynamically created functions)\r\n* API consistency as a core principle (meaning all functions that look the same behave the same)\r\n* Builder pattern interfaces\r\n* Eventing only to hook up to the browser\r\n\r\nYou will love Prime!\r\n\r\n## Getting Started\r\n\r\nTo quickly get started with Prime JS, add this to your web page:\r\n\r\n```\r\n<script type=\"text/javascript\" src=\"http://prime-framework.github.io/prime-js/prime-0.13.js\"></script>\r\n```\r\n\r\nThe latest version of Prime JS is 0.13.\r\n\r\nWe don't recommend using the github server to download Prime in production. Or using the full Prime JS file in production. Instead, you should minify this file before going to production.\r\n\r\n## Selecting\r\n\r\nSelecting in Prime uses a static function in the Prime.Document namespace. Under the hoods this uses Sizzle, so if you are used to JQuery or other frameworks, it works the same. Here's an example:\r\n\r\n```\r\nvar element = Prime.Document.queryFirst('.box .header');\r\n```\r\n\r\nThe return value of this function is a new instance of the _Prime.Document.Element_ class. You can also select multiple elements like this:\r\n\r\n```\r\nvar elementList = Prime.Document.query('p');\r\n```\r\n\r\nThe return value of this function is a new instance of the _Prime.Document.ElementList_ class. \r\n\r\nThere are a few other selector functions in the _Prime.Document_ namespace:\r\n\r\n* queryUp - queries upwards for elements\r\n* queryLast - queries the last matching element\r\n* queryByID - takes an ID and returns a Prime.Document.Element\r\n\r\nLike all of Prime, these functions are well documented and you should use our JSDoc to learn how to use them. If you ever see a function that isn't well documented, file an issue and we'll fix it.\r\n\r\n## ElementLists\r\n\r\nThe simplest usage of a _Prime.Document.ElementList_ is to iterate over all of the elements. The _each_ function makes this simple:\r\n\r\n```\r\nelementList.each(function(element) {\r\n  // Do something interesting with the element\r\n});\r\n```\r\n\r\n## Element\r\n\r\nThe Element class is the basis of Prime. You use them to manipulate and traverse the DOM. Refer to the JSDoc for the Element class to learn about the functions we have already implemented. If you need a new one, suggest it on the mailing list or in the issue tracker.\r\n\r\n## Document Ready\r\n\r\nAnother common task is to register an event listener that is called when the document is ready. Here is how you do that with Prime:\r\n\r\n```\r\nfunction ready() {\r\n  // Do something\r\n}\r\n\r\nPrime.Document.onReady(ready);\r\n```\r\n\r\nOr the inline method like this:\r\n\r\n```\r\nPrime.Document.onReady(function() {\r\n  // Do something\r\n});\r\n```\r\n\r\n## AJAX\r\n\r\nPrime has a class named _Prime.Ajax.Request_ that supports all your AJAXy needs. You can even subclass the _Request_ class to add your own event handlers and more. Here's a quick example of using the _Request_ to make an AJAX request:\r\n\r\n```\r\nfunction success() {\r\n  // Do something\r\n}\r\n\r\nnew Prime.Ajax.Request('/some/uri', 'POST').\r\n    withSuccessHandler(success).\r\n    go();\r\n```\r\n\r\nRefer to the JSDoc to explore Prime's AJAX handling.\r\n\r\n## Context and this\r\n\r\nWe got tired of _this_ being different things in every framework (or even in multiple places in the same framework). We decided it was time to make _this_ consistent (or at least as much as we could). Since Prime is based on Objects/Classes, you can make Prime ensure that _this_ refers to the current object.\r\n\r\nHere is an example of using _Prime.Document.Element_ inside a class to handle click events:\r\n\r\n```\r\nvar MyClass = function() {\r\n  this.element = Prime.Document.queryFirst('.some-class').\r\n      addEventListener('click', this.handleClickEvents, this);\r\n  this.message = 'Hello World';\r\n};\r\n\r\nMyClass.prototype = {\r\n  handleClickEvents: function(event) {\r\n    alert(this.message); // Says 'Hello World'\r\n  }\r\n}\r\n```\r\n\r\nNotice that when we added the event listener to the element we passed in the event name, the handler function and then _this_. What this tells Prime to do is ensure that when the event handler function is called that the _this_ variable is correct.\r\n\r\nEverywhere we could make this work in Prime, we did. All event functions take this third parameter. \r\n\r\nYou can even use or proxy handling for your own needs. Check out the _Prime.Utils.proxy_ function to learn more.\r\n\r\n## Hacking\r\n\r\nIf you want to hack on Prime, your best bet will be to clone/fork the git repository. This contains all of the JavaScript files in the src/main/js directory. We link to jquery/sizzle as a submodule, so you will need to initialize and update this submodule located in the src/main/js/sizzle directory. \r\n\r\nIf you have Gradle installed and want to generate a single JS file, run:\r\n\r\n```\r\n$ gradle jar\r\n```\r\n\r\nYeah, we know this doesn't actually JAR anything, but Gradle relies on the java plugin and we just went with it. \r\n\r\nGradle spits out the full Prime JS file at **build/libs/prime.js**. Copy this file into your web application (or symlink it). Once you have either the Prime JavaScript file copied into your project, insert the standard script tag in your header and you are SET!\r\n\r\n```\r\n<script type=\"text/javascript\" src=\"/js/prime.js\"></script>\r\n```\r\n\r\nYou can also just use the individual Prime JavaScript files instead of the combined file. This will also require that you include the Sizzle JS file. The Sizzle file is located in the Prime JS project under src/main/js/sizzle/sizzle.js.\r\n\r\n## Credits\r\n\r\nPrime JS is built by the developers at [Inversoft](http://www.inversoft.com). If you love working on cool code like Prime, we are always looking for great developers to join our team.\r\n\r\n## Learn More\r\n\r\nDive into the JSDoc for Prime JS and see what you can find. The JSDoc for Prime JS is located here:\r\n\r\n[http://inversoft.github.io/prime-js/jsdoc/index.html](http://inversoft.github.io/prime-js/jsdoc/index.html)\r\n\r\nOr if you need additional assistance, send a message to the Prime User mailing list here:\r\n\r\n[https://groups.google.com/forum/?fromgroups#!forum/prime-js-users](https://groups.google.com/forum/?fromgroups#!forum/prime-js-users)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}